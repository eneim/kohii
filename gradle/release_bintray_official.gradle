/*
 * Copyright (c) 2019 Nam Nguyen, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import kohii.BuildConfig
import kohii.ReleaseInfo

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

group = "im.ene.kohii"
version = BuildConfig.releaseVersionName

task androidJavadocs(type: Javadoc) {
  failOnError = false
  source = android.sourceSets.main.java.srcDirs
  ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
  classpath += files(ext.androidJar)
  exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
  getArchiveClassifier().set('javadoc')
  from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
  getArchiveClassifier().set('sources')
  from android.sourceSets.main.java.srcDirs
}

static def appendLicense(parentNode, name, url, distribution) {
  def node = parentNode.appendNode("license")
  node.appendNode("name", name)
  node.appendNode("url", url)
  node.appendNode("distribution", distribution)
}

static def appendScm(parentNode, connection, url) {
  def node = parentNode.appendNode("scm")
  node.appendNode("connection", connection)
  node.appendNode("url", url)
}

def isReleaseBuild() {
  return !version.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

project.afterEvaluate {
  publishing {
    publications {
      Kohii(MavenPublication) {
        groupId ReleaseInfo.groupId
        artifactId archivesBaseName
        version BuildConfig.releaseVersionName

        artifact bundleReleaseAar
        artifact androidJavadocsJar
        artifact androidSourcesJar

        pom.withXml {
          final node = asNode()

          node.appendNode("name", POM_NAME)
          node.appendNode("description", POM_DESCRIPTION)
          node.appendNode("url", POM_URL)

          def licenses = node.appendNode("licenses")
          appendLicense(licenses, POM_LICENCE_NAME, POM_LICENCE_URL, POM_LICENCE_DIST)
          appendScm(node, POM_SCM_CONNECTION, POM_SCM_URL)
          def dependencies = node.appendNode("dependencies")

          def developers = node.appendNode("developers")
          def developer = developers.appendNode("developer")
          developer.appendNode("id", POM_DEVELOPER_ID)
          developer.appendNode("name", POM_DEVELOPER_NAME)
          developer.appendNode("email", POM_DEVELOPER_MAIL)

          ext.addDependency = { Dependency dep, String scope ->
            if (dep.group == null ||
                dep.version == null ||
                dep.version == "unspecified" ||
                dep.name == null ||
                dep.name == "unspecified") {
              return
            } // ignore invalid dependencies

            final dependencyNode = dependencies.appendNode('dependency')
            dependencyNode.appendNode('groupId', dep.group)
            dependencyNode.appendNode('artifactId', dep.name)
            dependencyNode.appendNode('version', dep.version)
            dependencyNode.appendNode('scope', scope)

            if (!dep.transitive) {
              // If this dependency is transitive, we should force exclude all its dependencies them from the POM
              final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
              exclusionNode.appendNode('groupId', '*')
              exclusionNode.appendNode('artifactId', '*')
            } else if (!dep.properties.excludeRules.empty) {
              // Otherwise add specified exclude rules
              final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
              dep.properties.excludeRules.each { ExcludeRule rule ->
                exclusionNode.appendNode('groupId', rule.group ?: '*')
                exclusionNode.appendNode('artifactId', rule.module ?: '*')
              }
            }
          }

          // List all "compile" dependencies (for old Gradle)
          configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
          // List all "api" dependencies (for new Gradle) as "compile" dependencies
          configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
          // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
          configurations.implementation.getDependencies().each {
            dep -> addDependency(dep, "runtime")
          }
        }
      }
    }

    repositories {
      maven {
        url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()

        credentials {
          username getRepositoryUsername()
          password getRepositoryPassword()
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign publishing.publications
  }

  bintray {
    user = bintray_user
    key = bintray_apikey

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true

    pkg {
      repo = ReleaseInfo.repoName
      name = archivesBaseName
      userOrg = 'eneimlabs'
      desc = ReleaseInfo.description
      websiteUrl = ReleaseInfo.websiteUrl
      vcsUrl = ReleaseInfo.vcsUrl
      issueTrackerUrl = "${ReleaseInfo.websiteUrl}/issues"
      licenses = ReleaseInfo.licenses
      labels = ['Android', 'Video Playback', 'MediaPlayer', 'ExoPlayer', 'AndroidX']
      publicDownloadNumbers = true

      githubRepo = 'eneim/kohii'
      githubReleaseNotesFile = 'CHANGELOG.md' //Optional Github readme file

      publications = ['Kohii']

      version {
        name = BuildConfig.releaseVersionName
        desc = ReleaseInfo.description
        released = new Date()
        // vcsTag = '1.3.0'
        // Optional configuration for GPG signing
        gpg {
          sign = true //Determines whether to GPG sign the files. The default is false
          passphrase = bintray_gpg_password //Optional. The passphrase for GPG signing'
        }
        //Optional configuration for Maven Central sync of the version
        mavenCentralSync {
          sync = true // [Default: true] Determines whether to sync the version to Maven Central.
          user = SONATYPE_NEXUS_USERNAME // OSS user token: mandatory
          password = SONATYPE_NEXUS_PASSWORD // OSS user password: mandatory
          close = '1'
        }
      }
    }
  }
}
