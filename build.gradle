/*
 * Copyright (c) 2018 Nam Nguyen, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  apply from: "${rootDir.absolutePath}/gradle/deps.gradle"

  repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.0-beta01'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.6'
    classpath 'io.fabric.tools:gradle:1.28.1'
    classpath 'com.google.gms:google-services:4.2.0'
    classpath 'org.jlleitschuh.gradle:ktlint-gradle:7.2.1'
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  }

  apply plugin: "org.jlleitschuh.gradle.ktlint" // Version should be inherited from parent
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

ext {
  // query git for the SHA, Tag and commit count. Use these to automate versioning.
  gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
  gitCommitCount = 100 +
      Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())
}

// copy from https://github.com/chrisbanes/tivi
// read from gradle.properties for a value, or use default instead.
String lookUpProf(String propertyName, String defaultValue) {
  def propertyValue = project.properties[propertyName]
  return propertyValue != null ? propertyValue : defaultValue
}